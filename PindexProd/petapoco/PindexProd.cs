
// This file was automatically generated by the PetaPoco T4 Template
// Do not make changes directly to this file - edit the template instead
// 
// The following connection settings were used to generate this file
// 
//     Connection String Name: `PindexProdConnectionString`
//     Provider:               `System.Data.SqlClient`
//     Connection String:      `Data Source=192.168.2.47;Initial Catalog=PindexProd;Persist Security Info=True;User ID=sa;password=password123!@#`
//     Schema:                 ``
//     Include Views:          `False`

using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using PetaPoco;

namespace PindexProd.POCOS
{
	public partial class PindexProd : Database
	{
		public PindexProd() 
			: base("PindexProdConnectionString")
		{
			CommonConstruct();
		}

		public PindexProd(string connectionStringName) 
			: base(connectionStringName)
		{
			CommonConstruct();
		}
		
		partial void CommonConstruct();
		
		public interface IFactory
		{
			PindexProd GetInstance();
		}
		
		public static IFactory Factory { get; set; }
        public static PindexProd GetInstance()
        {
			if (_instance!=null)
				return _instance;
				
			if (Factory!=null)
				return Factory.GetInstance();
			else
				return new PindexProd();
        }

		[ThreadStatic] static PindexProd _instance;
		
		public override void OnBeginTransaction()
		{
			if (_instance==null)
				_instance=this;
		}
		
		public override void OnEndTransaction()
		{
			if (_instance==this)
				_instance=null;
		}
        
		public class Record<T> where T:new()
		{
			public static PindexProd repo { get { return PindexProd.GetInstance(); } }
			public bool IsNew() { return repo.IsNew(this); }
			public object Insert() { return repo.Insert(this); }
			public void Save() { repo.Save(this); }
			public int Update() { return repo.Update(this); }
			public int Update(IEnumerable<string> columns) { return repo.Update(this, columns); }
			public static int Update(string sql, params object[] args) { return repo.Update<T>(sql, args); }
			public static int Update(Sql sql) { return repo.Update<T>(sql); }
			public int Delete() { return repo.Delete(this); }
			public static int Delete(string sql, params object[] args) { return repo.Delete<T>(sql, args); }
			public static int Delete(Sql sql) { return repo.Delete<T>(sql); }
			public static int Delete(object primaryKey) { return repo.Delete<T>(primaryKey); }
			public static bool Exists(object primaryKey) { return repo.Exists<T>(primaryKey); }
			public static T SingleOrDefault(object primaryKey) { return repo.SingleOrDefault<T>(primaryKey); }
			public static T SingleOrDefault(string sql, params object[] args) { return repo.SingleOrDefault<T>(sql, args); }
			public static T SingleOrDefault(Sql sql) { return repo.SingleOrDefault<T>(sql); }
			public static T FirstOrDefault(string sql, params object[] args) { return repo.FirstOrDefault<T>(sql, args); }
			public static T FirstOrDefault(Sql sql) { return repo.FirstOrDefault<T>(sql); }
			public static T Single(object primaryKey) { return repo.Single<T>(primaryKey); }
			public static T Single(string sql, params object[] args) { return repo.Single<T>(sql, args); }
			public static T Single(Sql sql) { return repo.Single<T>(sql); }
			public static T First(string sql, params object[] args) { return repo.First<T>(sql, args); }
			public static T First(Sql sql) { return repo.First<T>(sql); }
			public static List<T> Fetch(string sql, params object[] args) { return repo.Fetch<T>(sql, args); }
			public static List<T> Fetch(Sql sql) { return repo.Fetch<T>(sql); }
			public static List<T> Fetch(long page, long itemsPerPage, string sql, params object[] args) { return repo.Fetch<T>(page, itemsPerPage, sql, args); }
			public static List<T> Fetch(long page, long itemsPerPage, Sql sql) { return repo.Fetch<T>(page, itemsPerPage, sql); }
			public static List<T> SkipTake(long skip, long take, string sql, params object[] args) { return repo.SkipTake<T>(skip, take, sql, args); }
			public static List<T> SkipTake(long skip, long take, Sql sql) { return repo.SkipTake<T>(skip, take, sql); }
			public static Page<T> Page(long page, long itemsPerPage, string sql, params object[] args) { return repo.Page<T>(page, itemsPerPage, sql, args); }
			public static Page<T> Page(long page, long itemsPerPage, Sql sql) { return repo.Page<T>(page, itemsPerPage, sql); }
			public static IEnumerable<T> Query(string sql, params object[] args) { return repo.Query<T>(sql, args); }
			public static IEnumerable<T> Query(Sql sql) { return repo.Query<T>(sql); }
		}
	}
	

    
	[TableName("CategoryImagesMapping")]
	[PrimaryKey("ID")]
	[ExplicitColumns]
    public partial class CategoryImagesMapping : PindexProd.Record<CategoryImagesMapping>  
    {
		[Column] public int CategoryID { get; set; }
		[Column] public int ImageID { get; set; }
		[Column] public int ID { get; set; }
		[Column] public int? UserID { get; set; }
	}
    
	[TableName("AppUsers")]
	[PrimaryKey("ID")]
	[ExplicitColumns]
    public partial class AppUser : PindexProd.Record<AppUser>  
    {
		[Column] public int ID { get; set; }
		[Column] public string Name { get; set; }
		[Column] public string Password { get; set; }
		[Column] public string Email { get; set; }
		[Column] public string Avatar { get; set; }
		[Column] public string FirstName { get; set; }
		[Column] public string About { get; set; }
		[Column] public string Location { get; set; }
		[Column] public string Website { get; set; }
		[Column] public string Invite { get; set; }
		[Column] public decimal? facebookid { get; set; }
		[Column] public int? Points { get; set; }
	}
    
	[TableName("User")]
	[PrimaryKey("ID")]
	[ExplicitColumns]
    public partial class User : PindexProd.Record<User>  
    {
		[Column] public int ID { get; set; }
		[Column] public string Name { get; set; }
		[Column] public string Password { get; set; }
	}
    
	[TableName("UserBatchAssigned")]
	[PrimaryKey("ID")]
	[ExplicitColumns]
    public partial class UserBatchAssigned : PindexProd.Record<UserBatchAssigned>  
    {
		[Column] public int ID { get; set; }
		[Column] public int UserID { get; set; }
		[Column] public int BatchStart { get; set; }
		[Column] public int BatchEnd { get; set; }
	}
    
	[TableName("Likes")]
	[PrimaryKey("ID")]
	[ExplicitColumns]
    public partial class Like : PindexProd.Record<Like>  
    {
		[Column] public int ID { get; set; }
		[Column] public int BoardsImagesMappingID { get; set; }
		[Column] public int UserID { get; set; }
	}
    
	[TableName("Articles")]
	[PrimaryKey("ID")]
	[ExplicitColumns]
    public partial class Article : PindexProd.Record<Article>  
    {
		[Column] public string Title { get; set; }
		[Column] public string RelImagePath { get; set; }
		[Column] public int ID { get; set; }
		[Column] public string Url { get; set; }
		[Column] public short? Image_Height { get; set; }
		[Column] public short? Image_Width { get; set; }
		[Column] public decimal? FNV1a { get; set; }
		[Column] public decimal? MURMUR2 { get; set; }
		[Column] public decimal? CRC64 { get; set; }
		[Column] public string ArticleContent { get; set; }
		[Column] public string Description { get; set; }
	}
    
	[TableName("sysdiagrams")]
	[PrimaryKey("diagram_id")]
	[ExplicitColumns]
    public partial class sysdiagram : PindexProd.Record<sysdiagram>  
    {
		[Column] public string name { get; set; }
		[Column] public int principal_id { get; set; }
		[Column] public int diagram_id { get; set; }
		[Column] public int? version { get; set; }
		[Column] public byte[] definition { get; set; }
	}
    
	[TableName("Rating")]
	[PrimaryKey("ImageID", autoIncrement=false)]
	[ExplicitColumns]
    public partial class Rating : PindexProd.Record<Rating>  
    {
		[Column] public int ImageID { get; set; }
		[Column] public int? RePins { get; set; }
		[Column] public int? Likes { get; set; }
		[Column("Rating")] public int? _Rating { get; set; }
	}
    
	[TableName("Review")]
	[PrimaryKey("ID")]
	[ExplicitColumns]
    public partial class Review : PindexProd.Record<Review>  
    {
		[Column] public int ID { get; set; }
		[Column] public int BIMID { get; set; }
		[Column] public string Question { get; set; }
		[Column] public string Answer { get; set; }
		[Column] public int? UserID { get; set; }
		[Column] public string SessionID { get; set; }
	}
    
	[TableName("Stores")]
	[PrimaryKey("ID")]
	[ExplicitColumns]
    public partial class Store : PindexProd.Record<Store>  
    {
		[Column] public string Title { get; set; }
		[Column] public string RelImagePath { get; set; }
		[Column] public int ID { get; set; }
		[Column] public string Url { get; set; }
		[Column] public short? Image_Height { get; set; }
		[Column] public short? Image_Width { get; set; }
		[Column] public decimal? FNV1a { get; set; }
		[Column] public decimal? MURMUR2 { get; set; }
		[Column] public decimal? CRC64 { get; set; }
	}
    
	[TableName("BoardContributor")]
	[PrimaryKey("ID")]
	[ExplicitColumns]
    public partial class BoardContributor : PindexProd.Record<BoardContributor>  
    {
		[Column] public int BoardID { get; set; }
		[Column] public int ID { get; set; }
		[Column] public int ContributorID { get; set; }
	}
    
	[TableName("Images")]
	[PrimaryKey("ID")]
	[ExplicitColumns]
    public partial class Image : PindexProd.Record<Image>  
    {
		[Column] public int ID { get; set; }
		[Column] public short? Image_Height { get; set; }
		[Column] public short? Image_Width { get; set; }
		[Column] public string RelativeImage_Path { get; set; }
		[Column] public DateTime? Date { get; set; }
		[Column] public bool? Tagged { get; set; }
		[Column] public decimal? CRC64 { get; set; }
		[Column] public decimal? FNV1a { get; set; }
		[Column] public decimal? MURMUR2 { get; set; }
		[Column] public bool? Uploaded { get; set; }
	}
    
	[TableName("Boards")]
	[PrimaryKey("ID")]
	[ExplicitColumns]
    public partial class Board : PindexProd.Record<Board>  
    {
		[Column] public int ID { get; set; }
		[Column] public string Name { get; set; }
		[Column] public int? CatID { get; set; }
		[Column] public int? UserID { get; set; }
	}
    
	[TableName("BoardsImagesMapping")]
	[PrimaryKey("ID")]
	[ExplicitColumns]
    public partial class BoardsImagesMapping : PindexProd.Record<BoardsImagesMapping>  
    {
		[Column] public int? BoardID { get; set; }
		[Column] public int ImageID { get; set; }
		[Column] public int ID { get; set; }
		[Column] public string Image_Title { get; set; }
		[Column] public int? UserID { get; set; }
		[Column] public string Source { get; set; }
		[Column] public int? Rating { get; set; }
	}
    
	[TableName("Comments")]
	[PrimaryKey("ID")]
	[ExplicitColumns]
    public partial class Comment : PindexProd.Record<Comment>  
    {
		[Column] public int ID { get; set; }
		[Column] public string Comments { get; set; }
		[Column] public int BoardsImagesMappingID { get; set; }
		[Column] public int UserID { get; set; }
	}
    
	[TableName("Category")]
	[PrimaryKey("ID")]
	[ExplicitColumns]
    public partial class Category : PindexProd.Record<Category>  
    {
		[Column] public int ID { get; set; }
		[Column] public string Name { get; set; }
		[Column] public int? ParentID { get; set; }
	}
    
	[TableName("Facebook")]
	[PrimaryKey("id", autoIncrement=false)]
	[ExplicitColumns]
    public partial class Facebook : PindexProd.Record<Facebook>  
    {
		[Column] public string first_name { get; set; }
		[Column] public string gender { get; set; }
		[Column] public decimal id { get; set; }
		[Column] public string last_name { get; set; }
		[Column] public string link { get; set; }
		[Column] public string locale { get; set; }
		[Column] public string name { get; set; }
		[Column] public double? timezone { get; set; }
		[Column] public DateTime? updated_time { get; set; }
	}
}


